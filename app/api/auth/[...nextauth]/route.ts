import type { NextAuthOptions } from "next-auth";
import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";

const authOptions: NextAuthOptions = {
  // Configure one or more authentication providers
  session: {
    strategy: "jwt",
  },
  providers: [
    CredentialsProvider({
      name: "Logo",
      credentials: {
        email: { label: "Username", type: "text", placeholder: "j@smith.com" },
        password: { label: "Password", type: "password" },
      },

      async authorize(credentials, req) {
        const res = await fetch(
          "https://products-odvc.onrender.com/ap1/v1/users/login",
          {
            method: "POST",
            body: JSON.stringify(credentials),
            headers: { "Content-Type": "application/json" },
          }
        );
        const user = await res.json();
        // If no error and we have user data, return it
        if (res.ok && user) {
          return user;
        }
        // Return null if user data could not be retrieved
        throw new Error("Invalid Credentials");
        // return null;
      },
    }),
  ],

  callbacks: {
    // when a jwt is created this call back is called which will return an token object with user and token details
    // token details are generated by nextauth
    async jwt({ token, user }) {
      return { ...token, ...user };
    },

    // next the token object created is passed and is saved in the session object for user key
    async session({ session, token }: any) {
      session.user = token;
      return session;
    },
  },

  pages: {
    signIn: "/signIn",
    // signOut: '/auth/signout',
    // error: '/auth/error', // Error code passed in query string as ?error=
    // verifyRequest: '/auth/verify-request', // (used for check email message)
    // newUser: '/auth/new-user' // New users will be directed here on first sign in (leave the property out if not of interest)
  },

  // ...add more providers here
};

// export default NextAuth(authOptions);

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
